#!/usr/bin/python

import subprocess

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def printCol(text, color):
    print(color + text + bcolors.ENDC)

def main():
    gitRootDir, err, ret = runCommand("git rev-parse --show-toplevel", None)
    if ret:
        print("No git repo found")
        return
    while True:
        firstCommit = getObject(None)
        secondCommit = getObject(firstCommit, firstCommit)
        isConsoleDiffTool = getDiffToolChoice()
        alreadySeen = {}
        fileList = generateList(getListCommand(firstCommit, secondCommit))
        if fileList == None:
            print("Error while generating a list")
            return
        if len(fileList) == 0:
            print("The diff is empty")
            continue
        diffHasBeenShowed = False
        while True:
            if not diffHasBeenShowed: 
                print(formatListColor(fileList, bcolors.WARNING, alreadySeen))
            diffHasBeenShowed = False
            goToExternal = False
            while True:
                choice = raw_input("q for quit\n<num> for choose the file for diff\nr for re-enter commits or re-choose a difftool\nl for list the files again\n" + bcolors.BOLD + "You choice: " + bcolors.ENDC)
                if choice == "q":
                    return 
                elif choice == "r":
                    goToExternal = True
                    break
                elif choice == "l":
                    print(formatListColor(fileList, bcolors.WARNING, alreadySeen))
                elif choice != "" and int(choice) > 0 and int(choice) <= len(fileList):
                    choosedFile = fileList[int(choice)] 
                    choosedFile = gitRootDir[:-1] + "/" +  choosedFile
                    showDiff(choosedFile, firstCommit, isConsoleDiffTool, secondCommit)
                    diffHasBeenShowed = True
                    alreadySeen[int(choice)] = True
                    break
                else:
                    print("Incorrect choice")
            if goToExternal:
                break

def getCommitForObject(obj):
    #out, err, ret = runCommand("git rev-parse " + obj, False)
    return obj
    
def getCommitFromList(obj, storeObj):
    first = True
    while True:
        if not first:
            newObj = raw_input("Please, enter the object name(" + storeObj + " by default): ") or storeObj
            if isValidObject(newObj):
                return newObj
            obj = newObj
        tagList = generateList("git tag --list *" + obj + "*")
        branchList = generateList("git branch --list *" + obj + "*")
        if tagList == None or branchList == None:
            print("Error, while generating a list of objects")
            continue
        else:
            if len(tagList) != 0:
                for key, value in branchList.items():
                    branchList[key + len(tagList.keys())] = value
                    del branchList[key]
            for key, value in branchList.items():
                if branchList[key][0] == "*":
                    branchList[key] = branchList[key].split(" ")[1]
            tagList.update(branchList)
            fullList = tagList
            if len(fullList) == 1:
                print("Object: " + fullList[1])
                return getCommitForObject(fullList[1]);
            elif len(fullList) == 0:
                first = False
                print("Empty list of objects")    
            else:
                print(formatList(fullList)) 
                while True:
                    choice = int(raw_input("Please choose the object from the list: "))
                    if choice > 0 and choice < len(fullList):
                        print("You choose " + fullList[choice]) 
                        return getCommitForObject(fullList[choice])
                    else:
                        print("Incorrect choice")
                        first = False

def getObject(firstCommit, default = "HEAD"):
    if firstCommit == None:
        message = "Please, enter the git object (%s by default): " % default
    else:
        default = firstCommit + "~1"
        message = "Please, enter the git object (%s by default): " % (default)
    inObject = raw_input(message) or default
    if isValidObject(inObject):
        commit = inObject
    else:
        commit = getCommitFromList(inObject, default)
    return commit 
        
        
def getListCommand(firstCommit, secondCommit):
    return "git diff --name-only " + firstCommit + " " + secondCommit

def getDiffToolChoice():
    choice = -1
    while True:
        choice = int(raw_input("Please select visual mode for diff:\n1: console diff\n2: difftool\nPlease specify a number: "))
        if choice == 1:
            return True
        elif choice == 2:
            return False
        else:
            print("Incorrect input")

def isValidObject(commit):
    if commit == None:
        return False
    out, err, ret = runCommand("git rev-parse --quiet --verify " + commit, False)
    if ret != 0:
        return False
    return True

def showDiff(filename, commit, inConsole, secondCommit=""):
    command = "git diff"
    if not inConsole:
        command += "tool -y"
    command += " " + commit + " " + secondCommit + " " + filename
    try:
        runCommand(command, inConsole)
    except Exception:
        raise Exception("Incorrect filename or commit")

def formatList(fileList):
    return bcolors.BOLD + "\n".join("%d: %s" % (num, filename) for (num, filename) in fileList.items()) + bcolors.ENDC 

def formatListColor(fileList, color, seenList):
    out = bcolors.BOLD 
    for num, filename in fileList.items():
        if seenList.has_key(num):
            out += color 
        out += "%d: %s" % (num, filename) 
        if seenList.has_key(num):
            out += bcolors.ENDC
            out += bcolors.BOLD
        out += "\n"
    return out[:-1] + bcolors.ENDC #remove last \n


def generateList(command):
    out, err, ret = runCommand(command, False)
    if ret != 0:
        return None
    outList = out.split("\n")[:-1] # the last line is empty
    return dict(enumerate(outList, start = 1)) 

def runCommand(command, externalTool):
    if externalTool:
        p = subprocess.Popen(command, shell=True)
        p.wait()
        return None
    else:
        p = subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
        out, err = p.communicate()
        return out, err, p.returncode

if __name__ == "__main__":
    main()
